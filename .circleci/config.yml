version: 2.1

commands:
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      # Add parameter here   
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            aws cloudformation delete-stack --stack-name backend-${CIRCLE_WORKFLOW_ID:0:7}
            aws cloudformation delete-stack --stack-name frontend-${CIRCLE_WORKFLOW_ID:0:7}
      - run:
          name: Delete s3 bucket
          when: on_fail
          command: |
            aws s3 rm s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive
            exit 0


  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.
    parameters:
      # Add parameter here     
    steps:
      - run:
          name: Revert migrations
          # Add when this will run
          command: |
            # Curl command here to see if there was a successful migration associated with the workflow id, store result in SUCCESS variable
            SUCCESS = 1
            if(( $SUCCESS==1 )); 
            then
            #  cd ~/project/backend
            #  npm install
            #  Add revert code here. You can find this in the Getting Started section.
              exit 1
            fi
            
jobs:

  install-backend-dependencies:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run:
          name: npm install
          working_directory: ./backend
          command: ls -la && npm install
      - persist_to_workspace:
          root: .
          paths:
            - backend/node_modules

  install-frontend-dependencies:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run:
          name: npm install
          working_directory: ./frontend
          command: ls -la && npm install
      - persist_to_workspace:
          root: .
          paths:
            - frontend/node_modules

  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm i
            npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
            cd backend
            npm i
            npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build

  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run:
          name: Frontend test
          command: |
            cd frontend
            npm i
            npm run test
                
  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run:
          name: Backend test
          command : |
            cd backend
            npm i
            npm run test

  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run:
          name: Analyse Frontend
          command: |
            cd frontend
            npm i
            npm audit fix --audit-level=critical --force
      - restore_cache:
          key: frontend-build

  scan-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run:
          name: Analyse Backend
          command: |
            cd backend
            npm i
            npm audit fix --audit-level=critical --force
      - restore_cache:
          key: backend-build

  # deploy-infrastructure:
  #   docker:
  #     - image: amazon/aws-cli
  #   steps:
  #     # Checkout code from git
  #     - checkout
  #     - run:
  #         name: Install dependencies
  #         command: yum install -y tar gzip
  #     - run:
  #         name: Ensure back-end infrastructure exists
  #         working_directory: ./.circleci/files
  #         command: |
  #           aws cloudformation deploy \
  #             --template-file backend.yml \
  #             --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
  #             --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}" \
  #             --tags project=udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}
  #     - run:
  #         name: Save backend URL in memstash
  #         command: |
  #           BACKEND_IP=$(aws ec2 describe-instances \
  #             --query 'Reservations[*].Instances[*].PublicIpAddress' \
  #             --filters "Name=tag:project,Values=udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
  #             --output text)
  #           curl -H "Content-Type: text/plain" -H "token: a497ba39-5d14-4352-89ca-477a1b1f1728" --request PUT --data "http://$BACKEND_IP:3030" https://api.memstash.io/values/BACKEND_URL
      
  #     - run:
  #         name: Ensure front-end infrastructure existS
  #         working_directory: ./.circleci/files
  #         command: |
  #           aws cloudformation deploy \
  #             --template-file frontend.yml \
  #             --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
  #             --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}" \
  #             --tags project=udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7} 
  #     - run:
  #         name: Add back-end ip to ansible inventory
  #         working_directory: ./.circleci/ansible
  #         command: |
  #           aws ec2 describe-instances \
  #             --query 'Reservations[*].Instances[*].PublicIpAddress' \
  #             --filters "Name=tag:project,Values=udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
  #             --output text >> inventory
  #             cat inventory
  #     - persist_to_workspace:
  #         root: .
  #         paths:
  #           - .circleci/ansible/inventory
  #     # Here's where you will add some code to rollback on failure
  #     - destroy-environment   

  configure-infrastructure:
    docker:
      - image: python:3.7-alpine3.12
    steps:
      - checkout
      # Add ssh keys with fingerprint
      - add_ssh_keys:
          fingerprints: ["b8:e9:d1:fb:86:53:55:e2:e3:c1:7e:5e:50:f1:62:b6:ee:f5:3a:21"]    
      # attach workspace
      - attach_workspace:
          at: .
      - run:
          name: Install dependencies
          working_directory: ./.circleci/ansible
          command: |
            apk add --update ansible
            ansible --version
            pip3 install --upgrade pip
            pip3 install awscli
            aws --version
      - run:
          name: Configure server
          working_directory: ./.circleci/ansible
          command: |
            pwd &&
            ls -la
            cat inventory
            ansible-playbook -i inventory configure-server.yml
      - destroy-environment       

  

     

          
workflows:
  default:
    jobs:
      - install-backend-dependencies
      - install-frontend-dependencies
      - build-frontend:
          requires:
            - install-frontend-dependencies
      - build-backend:
          requires:
            - install-backend-dependencies
      - test-frontend:
          requires: 
            - build-frontend
      - test-backend:
          requires: 
            - build-backend
      - scan-backend:
          requires: 
            - build-backend
      - scan-frontend:
          requires: 
            - build-frontend
      # - deploy-infrastructure:
      #     requires: 
      #       - test-frontend 
      #       - test-backend 
      #       - scan-frontend 
      #       - scan-backend
      #     filters:
      #       branches:
      #         only: 
      #           - master
      - configure-infrastructure:
          # requires: 
          #   - deploy-infrastructure

      
      